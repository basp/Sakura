# This is the src directory Makefile.am.
# It describes how to build the src directory.

# All modifications MUST go in Makefile.am, not Makefile or Makefile.in, which
# are automatically generated by the build system.


# Distribute documentation.
dist_doc_DATA = AddingNewMOOTypes.txt ChangeLog.txt MOOCodeSequences.txt \
                README.Minimal README.rX

# Distribute the example databases.
dist_data_DATA = Minimal.db yieldtest.db

# Distribute the scripts (but don't install them into system directories if
# asked to install).
dist_noinst_SCRIPTS = cvsstat readprofile.pl restart restart.sh


# Sources that must be built first, because automake won't figure out that it
# needs to make these before things that need them.
# In particular, this will ensure that yacc is run on parser.y to create
# parser.h *before* it's needed.
# (Note that automake is smart enough to figure out how to actually make
# parser.h.)
# This will also ensure that keywords.c is created before it's needed, although
# we specify how to do so manually later on.
BUILT_SOURCES = keywords.c parser.h


# The flags to pass to yacc.
# (If any other flags are added, don't cluster them (e.g. use '-d -t', not
# '-dt', or automake will have a hard time.)
AM_YFLAGS = -d


# The list of binary programs to be compiled.
bin_PROGRAMS = moo


# The sources used to build the moo program.
moo_SOURCES = ast.c code_gen.c db_file.c db_io.c db_objects.c db_properties.c \
              db_verbs.c decompile.c disassemble.c eval_env.c eval_vm.c \
              exceptions.c execute.c extensions.c functions.c hash_lookup.c \
              hash.c keywords.gperf list.c log.c malloc.c match.c md5.c \
              moomysql.c mysql_child.c name_lookup.c network.c net_mplex.c \
              net_proto.c numbers.c objects.c parser.y parse_cmd.c pattern.c \
              pipe_utils.c program.c profiler.c property.c quota.c ref_count.c \
              regexpr.c serialize.c server.c storage.c streams.c str_intern.c \
              sym_table.c tasks.c timers.c unparse.c utils.c verbs.c version.c \
              files.c waif.c

# These sources may or may not be compiled into moo.
# (NOTE: Unless you edit options.h, certain ones are pre-selected.)
# (FIXME: Some of these are obsolete, and which ones are must be determined and
# fixed manually.)
EXTRA_moo_SOURCES = client_bsd.c client_sysv.c gnu-malloc.c net_bsd_lcl.c \
                    net_bsd_tcp.c net_mp_fake.c net_mp_poll.c net_mp_selct.c \
                    net_multi.c net_single.c net_sysv_lcl.c net_sysv_tcp.c

# These sources are auto-generated, and shouldn't be distributed automatically.
nodist_moo_SOURCES = keywords-s.c
DISTCLEANFILES = keywords-s.c


# All of the headers.
# (This tells automake to make sure that these are not installed, but are
# included in any dist tarballs, even if not listed in any _SOURCES variables.)
noinst_HEADERS = ast.h bf_register.h code_gen.h config.h db.h db_io.h \
                 db_private.h db_tune.h decompile.h disassemble.h eval_env.h \
                 eval_vm.h exceptions.h execute.h functions.h getpagesize.h \
                 hash.h hash_lookup.h keywords.h list.h log.h match.h md5.h \
                 moomysql.h my-ctype.h my-fcntl.h my-inet.h my-in.h my-ioctl.h \
                 my-math.h my-poll.h my-signal.h my-socket.h mysql_child.h \
                 my-stat.h my-stdarg.h my-stdio.h my-stdlib.h my-string.h \
                 my-stropts.h my-sys-time.h my-time.h my-tiuser.h my-types.h \
                 my-unistd.h my-wait.h name_lookup.h net_mplex.h net_multi.h \
                 net_proto.h network.h numbers.h opcode.h options.h \
                 parse_cmd.h parserdefs.h pattern.h pipe_utils.h profiler.h \
                 program.h quota.h random.h ref_count.h regexpr.h serialize.h \
                 server.h storage.h streams.h str_intern.h structures.h \
                 sym_table.h tasks.h timers.h tokens.h unparse.h utils.h \
                 verbs.h version.h waif.h


# The following extra files should be distributed.
# This includes various documentation, and the automatically generated
# keywords.c (so the end-user doesn't need gperf installed if building from a
# tarball).
EXTRA_DIST = keywords.c



# The flags to pass to gperf.
GPERFFLAGS = --ignore-case --readonly-tables --omit-struct-type

# The rule to build C files from gperf files.
%.c: %.gperf
	$(GPERF) $(GPERFFLAGS) --key-positions=1,3,$$ --output-file=$@ $<


# Since we do some substitution regarding the ctype.h / my-ctype.h header, we
# need a rule to handle it.
# While this could be combined with the gperf rule, separating them makes this
# simpler and more robust if gperf isn't available but the file is already
# generated.
keywords-s.c: keywords.c
	$(SED) -e 's/#include <ctype.h>/#include "my-ctype.h"/' <$< >$@
