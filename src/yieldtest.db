** LambdaMOO Database, Format Version 5 **
4
8
0
1
3
#0
System Object

16
3
-1
-1
-1
1
-1
2
2
do_login_command
3
173
-1
task_suspended
3
173
-1
0
0
#1
Root Class

16
3
-1
-1
-1
-1
0
-1
0
0
0
#2
The First Room

0
3
-1
3
-1
1
-1
3
6
eval
3
88
-2
words
3
173
-1
verb
3
93
-2
prop
3
93
-2
test
3
13
-1
equals
3
173
-1
1
test
1
4
-1073741821
3
5
#3
Wizard

7
3
2
-1
-1
1
-1
-1
0
2
test
hash
2
4
0
3
5
10
17
0
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
4
2
2
ham
2
bug
0
0
0
0
0
0
0
0
3
5
#0:0
return #3;
.
#0:1
{is_yield, task} = args;
{taskid, start_time, ticks, clockid, prog, vloc, vname, line, vthis} = task;
s = tostr("A task was suspended: ", vloc, ":", vname, " line ", line, " (task ", taskid, ")");
notify(#3,s);
.
#2:0
answer = eval(("return " + argstr) + ";");
if (answer[1])
notify(player, tostr("=> ", toliteral(answer[2])));
else
for line in (answer[2])
notify(player, line);
endfor
endif
.
#2:1
line = args[1];
words = {};
while (line)
i = index(line, " ");
if (!i)
words = {@words, line};
line = "";
else
words = {@words, line[1..i - 1]};
line = line[i + 1..$];
endif
endwhile
return words;
.
#2:2
words = this:words(argstr);
add_verb(#2, {player, "rxd", words[1]}, words[2..4]);
notify(player, ("Added verb " + argstr) + ".");
.
#2:3
prop = argstr;
add_property(player, prop, {}, {player, "rc"});
notify(player, ("Added property " + prop) + ".");
.
#2:4
for a in [1..10]
b_ext = 1;
for b_int in [1..20000]
if (b_int != b_ext)
notify(player, tostr("fucked for loop in position A! int ", b_int, " != ext ", b_ext));
return;
endif
yield 2;
if (b_int != b_ext)
notify(player, tostr("fucked for loop in position B! int ", b_int, " != ext ", b_ext));
return;
endif
b_ext = b_ext + 1;
if ((b_ext % 5000) == 0)
notify(player, tostr(b_ext));
endif
endfor
notify(player, "x");
"now try with list";
l = {};
for x in [1..20000]
l = {@l, x};
yield;
endfor
b_ext = 1;
for b_int in (l)
if (b_int != b_ext)
notify(player, tostr("fucked for loop in position C! int ", b_int, " != ext ", b_ext));
return;
endif
yield 2;
if (b_int != b_ext)
notify(player, tostr("fucked for loop in position D! int ", b_int, " != ext ", b_ext));
return;
endif
b_ext = b_ext + 1;
if ((b_ext % 5000) == 0)
notify(player, tostr(b_ext));
endif
endfor
notify(player, tostr("x", a));
endfor
notify(player, "ok!");
.
#2:5
"True if the two lists given contain the same elements.";
"False otherwise.";
{set1, set2} = args;
while (set1)
{elt, @set1} = set1;
if (elt in set2)
set2 = setremove(set2, elt);
while (elt in set2)
set2 = setremove(set2, elt);
endwhile
while (elt in set1)
set1 = setremove(set1, elt);
endwhile
else
notify(player, "in set1 but not set2: " + toliteral(elt));
return 0;
endif
endwhile
if (set2)
for x in (set2)
notify(player, "in set2 but not set1: " + toliteral(x));
endfor
return 0;
else
return 1;
endif
.
0 clocks
0 queued tasks
0 suspended tasks
1 active connections with listeners
3 0
