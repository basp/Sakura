** LambdaMOO Database, Format Version 6 **
10
7
0
1
3
#0
System Object

16
3
-1
-1
-1
1
-1
2
1
do_login_command
3
173
-1
6
actor
action
nothing
ambiguous_match
failed_match
actions
6
1
4
3
1
1
5
3
1
1
-1
3
1
1
-2
3
1
1
-3
3
1
1
8
3
1
#1
Root Class

16
3
-1
-1
-1
-1
0
-1
0
0
0
#2
The First Room

0
3
-1
3
-1
1
-1
3
1
eval
3
88
-2
0
0
#3
Wizard

7
3
2
-1
-1
1
-1
4
0
0
0
#4
Actor

0
3
-1
-1
-1
1
-1
5
3
process_action_queue
3
172
-1
stop
3
165
-1
queue_action
3
165
-1
2
action_queue
executing
2
4
0
3
1
1
-1
3
1
#5
Action

0
3
-1
-1
-1
1
6
8
2
_start
3
172
-1
_finish
3
172
-1
0
0
#6


0
3
-1
-1
-1
5
-1
7
0
0
0
#7


0
3
-1
-1
-1
5
-1
-1
2
_start
3
172
-1
_finish
3
172
-1
0
0
#8
Actions

0
3
-1
-1
-1
1
-1
-1
0
1
foo
1
1
7
3
1
#9 recycled
#0:0
return #3;
.
#2:0
answer = eval(("return " + argstr) + ";");
if (answer[1])
notify(player, tostr("=> ", toliteral(answer[2])));
else
for line in (answer[2])
notify(player, line);
endfor
endif
.
#4:0
"Just return early if we're already processing the queue.";
if (valid(this.executing))
return;
endif
"As long as there are any actions in the queue...";
while (length(this.action_queue) > 0)
{action, args, description} = this.action_queue[1];
this.action_queue = listdelete(this.action_queue, 1);
this.executing = action;
{duration, passToFinish} = this.executing:_start(args);
suspend(duration);
"Usually you can `stop' actions so we need to make sure that didn't happen.";
if (valid(this.executing))
this.executing:_finish(passToFinish);
this.executing = $nothing;
endif
endwhile
.
#4:1
this.executing = $nothing;
this.action_queue = {};
.
#4:2
{action, args, description} = spec = args[1];
this.action_queue = listappend(this.action_queue, spec);
this:process_action_queue();
.
#7:0
notify(player, "You start fooing.");
return {3, $nothing};
.
#7:1
notify(player, "You finish fooing.");
.
0 clocks
0 queued tasks
0 suspended tasks
1 active connections with listeners
3 0
